@page "/leavetypes"

<h3>Leave Types</h3>

<div class="m-2 d-flex justify-content-end">
    <button @onclick="CreateLeaveType" class="btn btn-success">Add Leave Type</button>
</div>

@if (string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        @Message
    </div>
}

<div clas></div>
@if (LeaveTypes == null)
{
    <p>Loading Data...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Name
                </th>
                <th>
                    Default Days
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leaveType in LeaveTypes)
            {
                <tr>
                    <td>@leaveType.Id </td>
                    <td>@leaveType.Name </td>
                    <td>@leaveType.DefaultDays </td>
                    <td>
                        @* <AuthorizeView Roles="Administrator">
                            <button @onclick=@(() => AllocateLeaveType(leaveType.Id))
                                    class="btn btn-dark">
                                Allocate Leave
                            </button>
                            <button @onclick="@(() => EditLeaveType(leaveType.Id))" class="btn btn-warning">Edit</button>
                            <button @onclick="@(() => DeleteLeaveType(leaveType.Id))" class="btn btn-danger">Delete</button>
                        </AuthorizeView> *@
                        <button @onclick="@(() => DetailsLeaveType(leaveType.Id))" class="btn btn-info">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ILeaveTypeService LeaveTypeService { get; set; }
    // [Inject]
    // public ILeaveAllocationService LeaveAllocationService { get; set; }
    [Inject]
    IToastService toastService { get; set; }
    public List<LeaveTypeDto> LeaveTypes { get; private set; }
    public string Message { get; set; } = string.Empty;

    protected void CreateLeaveType()
    {
        NavigationManager.NavigateTo("/leavetypes/create/");
    }

    protected void AllocateLeaveType(Guid id)
    {
        // Use Leave Allocation Service here
        // LeaveAllocationService.CreateLeaveAllocations(id);
    }

    protected void EditLeaveType(Guid id)
    {
        NavigationManager.NavigateTo($"/leavetypes/edit/{id}");
    }

    protected void DetailsLeaveType(Guid id)
    {
        NavigationManager.NavigateTo($"/leavetypes/details/{id}");
    }

    protected async Task DeleteLeaveType(Guid id)
    {
        // var response = await LeaveTypeService.DeleteLeaveType(id);
        // if (response.Success)
        // {
        //     toastService.ShowSuccess("Leave Type deleted Successfully");
        //     await OnInitializedAsync();
        // }
        // else
        // {
        //     Message = response.Message;
        // }
    }

    protected override async Task OnInitializedAsync()
    {
        LeaveTypes = await LeaveTypeService.GetAllLeaveType();
    }
}
