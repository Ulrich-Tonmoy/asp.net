{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": {
              "memberTypes": [
                // Index signature
                "signature",
                "call-signature",
                // Fields
                "public-static-field",
                "protected-static-field",
                "private-static-field",
                "public-decorated-field",
                "protected-decorated-field",
                "private-decorated-field",
                "public-instance-field",
                "protected-instance-field",
                "private-instance-field",
                "public-abstract-field",
                "protected-abstract-field",
                "public-field",
                "protected-field",
                "private-field",
                "static-field",
                "instance-field",
                "abstract-field",
                "decorated-field",
                "field",
                // Static initialization
                "static-initialization",
                // Constructors
                "public-constructor",
                "protected-constructor",
                "private-constructor",
                "constructor",
                // Getters
                "public-static-get",
                "protected-static-get",
                "private-static-get",
                "public-decorated-get",
                "protected-decorated-get",
                "private-decorated-get",
                "public-instance-get",
                "protected-instance-get",
                "private-instance-get",
                "public-abstract-get",
                "protected-abstract-get",
                "public-get",
                "protected-get",
                "private-get",
                "static-get",
                "instance-get",
                "abstract-get",
                "decorated-get",
                "get",
                // Setters
                "public-static-set",
                "protected-static-set",
                "private-static-set",
                "public-decorated-set",
                "protected-decorated-set",
                "private-decorated-set",
                "public-instance-set",
                "protected-instance-set",
                "private-instance-set",
                "public-abstract-set",
                "protected-abstract-set",
                "public-set",
                "protected-set",
                "private-set",
                "#private-set",
                "static-set",
                "instance-set",
                "abstract-set",
                "decorated-set",
                "set",
                // Methods
                "public-static-method",
                "protected-static-method",
                "private-static-method",
                "#private-static-method",
                "public-decorated-method",
                "protected-decorated-method",
                "private-decorated-method",
                "public-instance-method",
                "protected-instance-method",
                "private-instance-method",
                "public-abstract-method",
                "protected-abstract-method",
                "public-method",
                "protected-method",
                "private-method",
                "static-method",
                "instance-method",
                "abstract-method",
                "decorated-method",
                "method"
              ]
            }
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"],
            "filter": {
              "regex": "^[a-z_]{1}([a-zA-Z0-9_]{0,})$",
              "match": false
            }
          },
          {
            "selector": ["class", "interface"],
            "format": ["PascalCase"]
          },
          {
            "selector": ["property"],
            "format": null,
            "filter": {
              "regex": "\\\\A[a-z_]{1}[a-zA-Z0-9_]*?\\\\b",
              "match": true
            }
          },
          { "selector": ["typeParameter", "typeAlias"], 
            "format": ["PascalCase"]
          },
          { "selector": ["enum", "enumMember"],
            "format": null
          },
          {
            "selector": ["variable", "function"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow",
            "filter": {
              "regex": "^(_)$",
              "match": false
            }
          },
          {
            "selector": "memberLike",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          }
        ],
        "prefer-arrow/prefer-arrow-functions": 0,
        "@angular-eslint/component-class-suffix": [
          "error",
          {
            "suffixes": [
              "Component",
              "Page",
              "Layout",
              "Modal",
              "Control",
              "Stub"
            ]
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "args": "after-used",
            "argsIgnorePattern": "fn|_"
          }
        ],
        "max-len": [
          "error",
          {
            "code": 240
          }
        ],
        "max-params": [
          "warn",
          5
        ],
        "no-implicit-coercion": "warn",
        "@typescript-eslint/indent": [
          "warn",
          2
        ],
        "@typescript-eslint/no-use-before-define": 0,
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "plugin:@angular-eslint/template/accessibility"
      ],
      "rules": {
      }
    }
  ]
}
